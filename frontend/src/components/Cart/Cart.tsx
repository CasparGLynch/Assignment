import * as React from 'react';
import './Cart.css';
import Header from '../header';
import { shallowEqual, useDispatch, useSelector } from 'react-redux';
import axios from 'axios';
import { removeProductOrder } from '../../store/actionCreators';
import { Dispatch } from 'react';

//Order interface for making POST requests to the API
interface IOrder {
  email: string,
  address: string,
  date: Date
}

//ProductOrder interface for making POST requests to the API
interface IProductIden {
  order: number,
  name: string,
  stock: number,
  product: number
}

//The cart functional component is used for displaying the currently selected orders 
const Cart: React.FC = () => {

  //Creating a dispatch to access Redux State
  const dispatch: Dispatch<any> = useDispatch()
  //Getting all the ProductOrders that where selected by the user
  const productOrders: IProductOrder[] = useSelector(
    (state: ProductOrderState) => state.productOrders,
    shallowEqual
  )
  

  //From the Redux state the ProductOrders are convreted into the productIden interface and stored in the 'i' list
  //the id of the order is temporarly 0 and will be set to the correct id after
  const i: IProductIden[] = [];
  productOrders.forEach(function (item: IProductOrder, index: any) {
    var temp: IProductIden = {
      order: 0,
      product: item.id,
      name: item.name,
      stock: item.stock
    }
    i.push(temp)

  });

  // creating a function to remove a productOrder from the redux state
  // this is called on the 'Remove from cart' button that is generated under every productOrder
  const removefromRedux = React.useCallback(
    (productOrder: IProductOrder) => dispatch(removeProductOrder(productOrder)),
    [dispatch]
  )

  // A functiom which handles the Order Data from the HTML form when the 'add Order' button is pressed and the form fields are not empty
  const handleOrderData = (e: React.FormEvent<HTMLInputElement>) => {
    setOrder({

      ...order,

      [e.currentTarget.id]: e.currentTarget.value,
    })
  }

  // creating two variables using .usestate hook
  // order: this is the order that will be sent to the server
  // totalPrice: this is the calculated totalPrice of all the products in the Order
  var defaultOrder: IOrder = {} as IOrder;
  const [order, setOrder]: [IOrder, (order: IOrder) => void] = React.useState(defaultOrder);
  const [totalPrice, setTotalPrice]: [number, (porder: number) => void] = React.useState(0)

  //this function is used to generate POST requests to the API
  const addOrder = (e: React.FormEvent) => {
    e.preventDefault() //preventDefault is used to make the page NOT reload as that will wipe the state 
    order.date = new Date() 

    //Post request for the Order and for each ProductOrder that was selected 
    axios.post('http://127.0.0.1:8000/api/orders/', order)
      .then(res => {
        i.forEach(function (item: IProductIden, index: number) {
          item.order = res.data.id; // setting the correct id (the one generated by the API) to the ProductOrder
          axios.post('http://127.0.0.1:8000/api/productorders/', item)
            .then(res => {
              window.location.reload() // calling the page to reload to clean the state
            })
        })
      })
      .catch()
  }

  //this .useEffect hook is used to dynamically calculate the totalPrice of an order
  //The Price is later rounded
  React.useEffect(() => {
    var totalPrice: number = 0;
    productOrders.forEach(function (value: IProductOrder, index: number) {
      totalPrice += value.price * value.stock;
    })
    setTotalPrice(totalPrice)
  })

  return (
    <div className="CartContainer">
      <Header />
      <h3 className="Title"></h3>
      <div className="Cart">
        {productOrders.map((productOrder: IProductOrder) => (
          <li key={productOrder.id}>
            <div className="Container">
              <h2>-Product: {productOrder.name}, {productOrder.stock} ordered.</h2>
              <button onClick={() => removefromRedux(productOrder)}>Remove from Cart</button>
            </div>
          </li>
        ))}

        <p className="Price">Total Price: ${Math.round(totalPrice * 100) / 100}</p>
      </div>
      <form onSubmit={addOrder} className="Add-Product">

        <input
          type="text"
          id="email"
          placeholder="Your email address"
          onChange={handleOrderData}
        />
        <input
          type="text"
          id="address"
          placeholder="Your Full Address"
          onChange={handleOrderData}
        />
        <input
          type="text"
          id="name"
          placeholder="Your First and last Name"
          onChange={handleOrderData}
        />
        <button disabled={order === undefined ? true : false} className="submit">
          Add Product
        </button>
      </form>
    </div>
  );
}

export default Cart;
